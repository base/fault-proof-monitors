use Call, Contains, Calls, Len, FilterAddressesInTrace from hexagate;
param disputeGame: address;

// Filter to only run this invariant if the disputeGame address is in the trace
source addressesInTrace: list<address> = FilterAddressesInTrace {
    addresses: list(disputeGame)
};

// Retrieve the claimCredit calls on the dispute game contract for the current block
source creditCalls: list<tuple<address>> = Calls {
    contract: disputeGame,
    signature: "function claimCredit(address _recipient)"
};

// Get the DelayedWETH contract address from the dispute game contract
source delayedWeth: address = Call {
    contract: disputeGame,
    signature: "function weth() returns (address)"
};

// Retrieve the unlock calls on the DelayedWETH contract for the current block
source unlocks: list<tuple<address, integer>> = Calls {
    contract: delayedWeth,
    signature: "function unlock(address _guy, uint256 _wad)"
};

// Retrieve the withdraw calls on the DelayedWETH contract for the current block
source withdraws: list<tuple<address, integer>> = Calls {
    contract: delayedWeth,
    signature: "function withdraw(address _guy, uint256 _wad)"
};

// Extract withdrawal recipients for comparison against claimCredit calls
source withdrawList: list<address> = [
    withdraw[0]
    for withdraw in withdraws
];

source withdrawalsForRecipients: list<boolean> = [
    Contains { sequence: withdrawList, item: creditCall[0] }
    for creditCall in creditCalls
];

// Given the list of recipients from claimCredit, use them to fetch their expected credit amount
source winnersAndBonds: list<tuple<address, integer>> = [
    tuple(
        creditCall[0],
        Call {
            contract: disputeGame,
            signature: "function credit(address recipient) view returns (uint256)",
            params: tuple(creditCall[0])
        }
    )
    for creditCall in creditCalls
];

// The unlocks array is [[address, bond], ...] and so is winnersAndBonds
// Therefore, we can compare each item in winnersAndBonds to the unlocks list - where we should find an item
// in the unlocks list with the exact same bond value
source foundUnlocks: list<boolean> = [
    Contains { sequence: unlocks, item: winnerAndBond }
    for winnerAndBond in winnersAndBonds
];

invariant {
    description: "Credit discrepancy: could not find matching unlock for claimCredit call",
    condition: (Len { sequence: addressesInTrace } > 0) and (Len { sequence: unlocks } > 0) ? (!Contains {
        sequence: foundUnlocks,
        item: false
    }) : true
};

invariant {
    description: "Withdrawal discrepancy: could not find matching withdraw for claimCredit call",
    condition: (Len { sequence: addressesInTrace } > 0) and (Len { sequence: withdraws } > 0) ? (!Contains {
        sequence: withdrawalsForRecipients,
        item: false
    }) : true
};

invariant {
    description: "Credit and Bond discrepancy: could not find withdraws or unlocks for claimCredit call",
    condition: (Len { sequence: addressesInTrace } > 0) and (Len {sequence: creditCalls} > 0)
        ? (Len { sequence: withdraws } > 0 or Len { sequence: unlocks } > 0)
        : true
};
