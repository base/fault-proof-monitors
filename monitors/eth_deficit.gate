use Call from hexagate;

param disputeGame: address;
param honestChallenger: address;

// Get the delayedWETH address for the particular dispute game
source delayedWETH: address = Call {
    contract: disputeGame,
    signature: "function weth() returns(address)"
};

// Get the bond distribution mode of the dispute game (0=UNDECIDED, 1=NORMAL, 2=REFUND)
source bondDistributionMode: integer = Call {
    contract: disputeGame,
    signature: "function bondDistributionMode() returns (uint8)"
};

// Check if the honest challenger has unlocked their credit in the dispute game
source hasUnlockedCredit: boolean = Call {
    contract: disputeGame,
    signature: "function hasUnlockedCredit(address) returns (bool)",
    params: tuple(honestChallenger)
};

// Get the normalModeCredit due to the honest challenger from the dispute game
source claimCredit: integer = Call {
    contract: disputeGame,
    signature: "function normalModeCredit(address) returns (uint256)",
    params: tuple(honestChallenger)
};

// Get the refundModeCredit due to the honest challenger from the dispute game
source refundModeCredit: integer = Call {
    contract: disputeGame,
    signature: "function refundModeCredit(address) returns (uint256)",
    params: tuple(honestChallenger)
};

// Get the total unlocked amount for the honest challenger from DelayedWETH
source totalCredit: tuple<integer,integer> = Call {
    contract: delayedWETH,
    signature: "function withdrawals(address game, address recipient) returns (uint256 amount, uint256 timestamp)",
    params: tuple(disputeGame, honestChallenger)
};

// Get the balance of ETH for the disputeGame address in DelayedWETH
source ethBalanceDisputeGame: integer = Call {
    contract: delayedWETH,
    signature: "function balanceOf(address) returns (uint256)",
    params: tuple(disputeGame)
};

// Determine which credit balance to check against based on the bond distribution mode
source creditBalanceToCheck: integer = bondDistributionMode == 1 ? claimCredit : bondDistributionMode == 2 ? refundModeCredit : 0;

invariant {
    // Alert only if:
    //   - The bond distribution mode is NORMAL (1) or REFUND (2)
    // Then ensure:
    //   - The honest challenger must have unlocked their credit
    //   - The appropriate credit (normalModeCredit or refundModeCredit) is fully backed by totalCredit
    //   - totalCredit is backed by DelayedWETH's ethBalance
    //   - The honest challenger's totalCredit cannot be non-zero if their credit is zero
    description: "Deficit of ETH in DelayedWETH contract",
    condition: bondDistributionMode == 0 ? true : // Skip if mode undecided
        hasUnlockedCredit
        and (creditBalanceToCheck <= totalCredit[0])
        and (totalCredit[0] <= ethBalanceDisputeGame)
        and !(creditBalanceToCheck == 0 and totalCredit[0] != 0)
};
