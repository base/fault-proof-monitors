use Call, HistoricalCalls, HistoricalEvents, Len, Range, Sum, FilterAddressesInTrace from hexagate;

param disputeGame: address;

// Filter to only run this invariant if the disputeGame address is in the trace
source addressesInTrace: list<address> = FilterAddressesInTrace {
    addresses: list(disputeGame)
};

// Get the DelayedWETH address for the provided dispute game
source delayedWETH: address = Call {
    contract: disputeGame,
    signature: "function weth() returns (address)"
};

// Retrieve all unlock calls on the delayedWETH contract
source unlocksWithSender: list<tuple<address,tuple<address,integer>>> = HistoricalCalls {
    contract: delayedWETH,
    signature: "function unlock(address _guy, uint256 _wad)",
    withSender: true
};

// Filter out only the unlock calls that originated from the currrent disputeGame contract
source unlockAmounts: list<integer> = [
    unlock[1][1]
    for unlock in unlocksWithSender if (unlock[0] == disputeGame)
];

// The total ETH that is set to be withdrawn is the sum of all the unlock calls (inclusive of the current block)
source currentEthUnlocked: integer = Sum { sequence: unlockAmounts };

// Retrieve all the claims that have been made thus far in the dispute game
source claims: list<integer> = Range {
    start: 0,
    // Note: stop is exclusive
    stop: Call { contract: disputeGame, signature: "function claimDataLen() returns (uint256)"}
};

source claimData: list<tuple<integer,address,address,integer,bytes,integer,integer>> = [
    Call {
        contract: disputeGame,
        signature: "function claimData(uint256) returns(uint32,address,address,uint128,bytes32,uint128,uint128)",
        params: tuple(claim)
    }
    for claim in claims
];

// Calculate all the bonds of all the claims (moves) that have been made thus far in the dispute game
source totalClaimBonds: integer = Sum {
    sequence: [claim[3] for claim in claimData]
};

// Get the current ETH balance of the dispute game in the DelayedWETH contract
source currDisputeEthBalance: integer = Call {
    contract: delayedWETH,
    signature: "function balanceOf(address) returns (uint256)",
    params: tuple(disputeGame)
};

// Check to see if any withdrawals have occurred on the DelayedWETH contract that originated from the dispute game
source pastWithdrawalEvents: list<tuple<integer>> = HistoricalEvents {
    contract: disputeGame,
    signature: "event ReceiveETH(uint256 amount)"
};

// The event returns a tuple so splice out each 'tuple' into a list so we can sum the values
source pastWithdrawals: list<integer> = [
    withdrawal[0]
    for withdrawal in pastWithdrawalEvents
];

// Sum the amounts, and add that to currDisputeEthBalance
// This handles the scenaio where prior subgame resolutions have already been claimed - now we can assume
//    that balanceOf() == max amount of ETH bonded
source totalDisputeEthBalance: integer = currDisputeEthBalance + Sum { sequence: pastWithdrawals };

// The total amount of ETH unlocked should never exceed the total ETH deposited into DelayedWETH for the current dispute game
invariant {
    description: "Dispute Game ETH imbalance detected between total DelayedWETH balance and total unlocks",
    condition: (Len { sequence: addressesInTrace } > 0) ? currentEthUnlocked <= totalDisputeEthBalance : true
};

// The aggregate amount of ETH for all the claims must always match the totalDisputeEthBalance
invariant {
    description: "Dispute Game ETH imbalance detected between total claim bonds and total DelayedWETH balance",
    condition: (Len { sequence: addressesInTrace } > 0) ? totalClaimBonds == totalDisputeEthBalance : true
};
